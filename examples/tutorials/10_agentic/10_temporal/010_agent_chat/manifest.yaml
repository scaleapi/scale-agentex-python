# Agent Manifest Configuration
# ---------------------------
# This file defines how your agent should be built and deployed.

# Build Configuration
# ------------------
# The build config defines what gets packaged into your agent's Docker image.
# This same configuration is used whether building locally or remotely.
#
# When building:
# 1. All files from include_paths are collected into a build context
# 2. The context is filtered by dockerignore rules
# 3. The Dockerfile uses this context to build your agent's image
# 4. The image is pushed to a registry and used to run your agent
build:
  context:
    # Root directory for the build context
    root: ../  # Keep this as the default root

    # Paths to include in the Docker build context
    # Must include:
    # - Your agent's directory (your custom agent code)
    # These paths are collected and sent to the Docker daemon for building
    include_paths:
      - 010_agent_chat

    # Path to your agent's Dockerfile
    # This defines how your agent's image is built from the context
    # Relative to the root directory
    dockerfile: 010_agent_chat/Dockerfile

    # Path to your agent's .dockerignore
    # Filters unnecessary files from the build context
    # Helps keep build context small and builds fast
    dockerignore: 010_agent_chat/.dockerignore


# Local Development Configuration
# -----------------------------
# Only used when running the agent locally
local_development:
  agent:
    port: 8000  # Port where your local ACP server is running
    host_address: host.docker.internal  # Host address for Docker networking (host.docker.internal for Docker, localhost for direct) 

  # File paths for local development (relative to this manifest.yaml)
  paths:
    # Path to ACP server file
    # Examples:
    #   project/acp.py          (standard)
    #   src/server.py           (custom structure)
    #   ../shared/acp.py        (shared across projects)
    #   /absolute/path/acp.py   (absolute path)
    acp: project/acp.py
    
    # Path to temporal worker file
    # Examples:
    #   project/run_worker.py   (standard)
    #   workers/temporal.py     (custom structure)
    #   ../shared/worker.py     (shared across projects)
    worker: project/run_worker.py


# Agent Configuration
# -----------------
agent:
  # Type of agent - either sync or agentic
  acp_type: agentic

  # Unique name for your agent
  # Used for task routing and monitoring
  name: at010-agent-chat

  # Description of what your agent does
  # Helps with documentation and discovery
  description: An AgentEx agentthat streams multiturn tool-enabled chat with tracing

  # Temporal workflow configuration
  # This enables your agent to run as a Temporal workflow for long-running tasks
  temporal:
    enabled: true
    workflows:
      # Name of the workflow class
      # Must match the @workflow.defn name in your workflow.py
      - name: at010-agent-chat

        # Queue name for task distribution
        # Used by Temporal to route tasks to your agent
        # Convention: <agent_name>_task_queue
        queue_name: 010_agent_chat_queue

  # Optional: Credentials mapping
  # Maps Kubernetes secrets to environment variables
  # Common credentials include:
  # credentials:
  #   - env_var_name: OPENAI_API_KEY
  #     secret_name: openai-api-key
  #     secret_key: api-key
  
  # Optional: Set Environment variables for running your agent locally as well 
  # as for deployment later on
  # env:
  #   - name: OPENAI_BASE_URL
  #     value: "https://api.openai.com/v1"
  #   - name: ACCOUNT_ID
  #     value: "your_account_id_here"  


# Deployment Configuration
# -----------------------
# Configuration for deploying your agent to Kubernetes clusters
deployment:
  # Container image configuration
  image:
    repository: "" # Update with your container registry
    tag: "latest"  # Default tag, should be versioned in production

  imagePullSecrets:
    - name: my-registry-secret  # Update with your image pull secret name

  # Global deployment settings that apply to all clusters
  # These can be overridden using --override-file with custom configuration files
  global:
    agent:
      name: "at010-agent-chat"
      description: "An AgentEx agentthat streams multiturn tool-enabled chat with tracing"
    
    # Default replica count
    replicaCount: 1
    
    # Default resource requirements
    resources:
      requests:
        cpu: "500m"
        memory: "1Gi"
      limits:
        cpu: "1000m"
        memory: "2Gi" 