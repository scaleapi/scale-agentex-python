"""Shared data models for the knowledge orchestration system."""

from datetime import datetime
from enum import Enum
from typing import Dict, List, Optional, Any
from uuid import UUID, uuid4
from pydantic import BaseModel, Field


class SourceType(str, Enum):
    """Types of knowledge sources."""
    CONFLUENCE = "confluence"
    GDRIVE = "gdrive"
    RESEARCH_REPORT = "research_report"
    WEB_SEARCH = "web_search"


class RequestType(str, Enum):
    """Types of requests the system can handle."""
    CHAT = "chat"
    RESEARCH = "research"
    MONITOR_SETUP = "monitor_setup"
    SEARCH = "search"


class ResearchDepth(str, Enum):
    """Depth levels for research requests."""
    BASIC = "basic"
    DETAILED = "detailed"
    COMPREHENSIVE = "comprehensive"


class KnowledgeItem(BaseModel):
    """Base knowledge item structure."""
    id: str = Field(default_factory=lambda: str(uuid4()))
    title: str = Field(..., description="Item title")
    content: str = Field(..., description="Item content")
    source_type: SourceType = Field(..., description="Source type")
    source_id: str = Field(..., description="Source identifier")
    source_url: Optional[str] = Field(default=None, description="Source URL if available")
    
    # Metadata
    metadata: Dict[str, Any] = Field(default_factory=dict, description="Additional metadata")
    tags: List[str] = Field(default_factory=list, description="Associated tags")
    
    # Timestamps
    created_at: datetime = Field(default_factory=datetime.utcnow)
    updated_at: datetime = Field(default_factory=datetime.utcnow)
    
    # Vector embedding for semantic search
    embedding: Optional[List[float]] = Field(default=None, description="Content embedding vector")


class ResearchReport(KnowledgeItem):
    """Research report generated by the deep research agent."""
    source_type: SourceType = Field(default=SourceType.RESEARCH_REPORT, description="Always research_report")
    
    # Research-specific fields
    query: str = Field(..., description="Original research query")
    depth_level: ResearchDepth = Field(..., description="Research depth level")
    iterations_performed: int = Field(default=1, description="Number of research iterations")
    sources_searched: int = Field(default=0, description="Number of sources searched")
    confidence_score: float = Field(default=0.0, description="Confidence in findings (0-1)")
    
    # Citations and references
    citations: List[str] = Field(default_factory=list, description="Source citations")
    source_urls: List[str] = Field(default_factory=list, description="Referenced URLs")
    
    # Task tracking
    task_id: Optional[str] = Field(default=None, description="Originating task ID")
    user_id: Optional[str] = Field(default=None, description="User who requested research")


class KnowledgeUpdate(KnowledgeItem):
    """Update from monitored knowledge sources (Confluence, Google Drive, etc.)."""
    
    # Update-specific fields
    change_type: str = Field(default="created", description="Type of change (created, updated, deleted)")
    previous_version_id: Optional[str] = Field(default=None, description="Previous version identifier")
    summary: Optional[str] = Field(default=None, description="AI-generated summary")
    
    # Source timestamps
    source_created_at: Optional[datetime] = Field(default=None, description="When created at source")
    source_updated_at: Optional[datetime] = Field(default=None, description="When last updated at source")
    
    # Processing status
    processing_status: str = Field(default="pending", description="Processing status")
    processing_error: Optional[str] = Field(default=None, description="Processing error if any")
    processed_at: Optional[datetime] = Field(default=None, description="When processing completed")
    
    # Source metadata
    author: Optional[str] = Field(default=None, description="Content author")
    version: Optional[str] = Field(default=None, description="Content version")


class SourceReference(BaseModel):
    """Reference to a knowledge source for search results."""
    id: str = Field(..., description="Unique source identifier")
    title: str = Field(..., description="Source title")
    type: SourceType = Field(..., description="Source type")
    url: Optional[str] = Field(default=None, description="Source URL if available")
    excerpt: str = Field(..., description="Relevant excerpt from source")
    relevance_score: float = Field(..., description="Relevance score (0-1)")
    last_updated: datetime = Field(..., description="Last update timestamp")
    metadata: Dict[str, Any] = Field(default_factory=dict, description="Additional metadata")


class SearchQuery(BaseModel):
    """Search query parameters."""
    query: str = Field(..., description="Search query text")
    source_types: Optional[List[SourceType]] = Field(default=None, description="Filter by source types")
    max_results: int = Field(default=10, description="Maximum results to return")
    min_relevance: float = Field(default=0.3, description="Minimum relevance score threshold")
    include_metadata: bool = Field(default=True, description="Include search metadata")


class SearchResult(BaseModel):
    """Search result container."""
    results: List[SourceReference] = Field(..., description="Search results")
    total_found: int = Field(..., description="Total number of matches")
    query_processed: str = Field(..., description="Processed/expanded query")
    search_time_ms: int = Field(..., description="Search execution time in milliseconds")
    metadata: Dict[str, Any] = Field(default_factory=dict, description="Search metadata")


class MonitorConfig(BaseModel):
    """Configuration for knowledge source monitoring."""
    id: str = Field(default_factory=lambda: str(uuid4()))
    source_type: SourceType = Field(..., description="Type of source to monitor")
    source_identifier: str = Field(..., description="Source identifier (space key, folder ID, etc.)")
    
    # Monitoring settings
    is_active: bool = Field(default=True, description="Whether monitoring is active")
    check_interval_minutes: int = Field(default=60, description="Check interval in minutes")
    watch_updates: bool = Field(default=True, description="Watch for updates")
    watch_creates: bool = Field(default=True, description="Watch for new content")
    watch_deletes: bool = Field(default=False, description="Watch for deletions")
    
    # Processing settings
    auto_process: bool = Field(default=True, description="Automatically process updates")
    notification_threshold: int = Field(default=5, description="Updates before notification")
    
    # Configuration
    extraction_config: Dict[str, Any] = Field(default_factory=dict, description="Source-specific config")
    filters: Dict[str, Any] = Field(default_factory=dict, description="Content filters")
    
    # Status tracking
    last_check_at: Optional[datetime] = Field(default=None, description="Last check timestamp")
    last_success_at: Optional[datetime] = Field(default=None, description="Last successful check")
    last_error_at: Optional[datetime] = Field(default=None, description="Last error timestamp")
    last_error_message: Optional[str] = Field(default=None, description="Last error message")
    consecutive_errors: int = Field(default=0, description="Number of consecutive errors")
    
    # Statistics
    total_items_found: int = Field(default=0, description="Total items found")
    total_items_processed: int = Field(default=0, description="Total items processed")
    total_errors: int = Field(default=0, description="Total errors encountered")
    
    # Timestamps
    created_at: datetime = Field(default_factory=datetime.utcnow)
    updated_at: datetime = Field(default_factory=datetime.utcnow)
