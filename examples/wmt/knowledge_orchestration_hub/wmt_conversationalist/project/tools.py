"""Custom tools for the Knowledge Hub conversational agent."""

import json
from typing import Any

from pydantic import BaseModel, Field
from agentex.lib.utils.logging import make_logger

from agentex.lib.core.temporal.activities.adk.providers.openai_activities import (
    FunctionTool,
)
# from agents.tool import FunctionTool
# from agents import RunContextWrapper

logger = make_logger(__name__)


class DeepResearchSearchParams(BaseModel):
    """Parameters for deep research artifact search."""

    query: str = Field(..., description="Search query for research artifacts")
    max_results: int = Field(
        default=5, description="Maximum number of results to return"
    )
    topic_filter: str = Field(default="", description="Optional topic filter")


class DeepResearchResult(BaseModel):
    """Result from deep research artifact search."""

    title: str = Field(..., description="Title of the research artifact")
    summary: str = Field(..., description="Summary of the research findings")
    topic: str = Field(..., description="Research topic/category")
    created_date: str = Field(..., description="Date when research was created")
    confidence_score: float = Field(..., description="Confidence score of the research")
    artifact_id: str = Field(..., description="Unique identifier for the artifact")


async def invoke_search_deep_research_artifacts(
    args_json: dict[str, Any]
) -> str:
    """
    Search for previously generated deep research artifacts.

    This tool searches through the knowledge base for comprehensive research reports
    that have been previously generated by the deep research agent.

    Args:
        context: The run context wrapper
        args_json: JSON string containing the search parameters

    Returns:
        JSON string containing search results or empty results if none found
    """
    args = DeepResearchSearchParams.model_validate(args_json)
    query = args.query
    max_results = args.max_results

    logger.info(
        f"Searching deep research artifacts for query: '{query}', "
        f"max_results: {max_results}"
    )

    # For now, return empty results as placeholder
    # In the future, this would query the actual knowledge database
    results: dict[str, Any] = {
        "query": query,
        "total_found": 0,
        "results": [],
        "message": (
            "No deep research artifacts found. The deep research agent hasn't "
            "generated any reports yet, or the knowledge database is not yet connected."
        ),
    }

    return json.dumps(results, indent=2)


# Create FunctionTool object that includes both definition and handler
DEEP_RESEARCH_SEARCH_TOOL = FunctionTool(
    name="search_deep_research_artifacts",
    description=(
        "Search for previously generated deep research artifacts and "
        "reports in the knowledge base"
    ),
    params_json_schema=DeepResearchSearchParams.model_json_schema(),
    on_invoke_tool=invoke_search_deep_research_artifacts,
)

# Available tools for the agent
AVAILABLE_TOOLS = [DEEP_RESEARCH_SEARCH_TOOL]
