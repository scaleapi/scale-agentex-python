"""Custom tools for the Knowledge Hub conversational agent."""

import json
import uuid
from typing import Any

from agents import RunContextWrapper
from pydantic import BaseModel, Field
from agentex.lib.utils.logging import make_logger
from agentex import Agentex
from agentex.lib.environment_variables import EnvironmentVariables

from agentex.lib.core.temporal.activities.adk.providers import (
    openai_activities,
)

FunctionTool = openai_activities.FunctionTool

logger = make_logger(__name__)

DEEP_RESEARCH_AGENT_NAME = "wmt-deep-researcher"

class DeepResearchSearchParams(BaseModel):
    """Parameters for deep research artifact search."""

    query: str = Field(..., description="Search query for research artifacts")
    max_results: int = Field(default=5, description="Maximum number of results to return")


class DeepResearchResult(BaseModel):
    """Result from deep research artifact search."""

    title: str = Field(..., description="Title of the research artifact")
    summary: str = Field(..., description="Summary of the research findings")
    topic: str = Field(..., description="Research topic/category")
    created_date: str = Field(..., description="Date when research was created")
    confidence_score: float = Field(..., description="Confidence score of the research")
    artifact_id: str = Field(..., description="Unique identifier for the artifact")


class NewResearchRequestParams(BaseModel):
    """Parameters for requesting new deep research."""

    message: str = Field(
        ...,
        description=(
            "Complete research request message that will be forwarded "
            "directly to the web research agent. Be detailed and "
            "specific in your request. Include: (1) Research depth preference "
            "(comprehensive, focused, etc.), (2) Specific context or "
            "disambiguation (e.g., clarify acronyms, specify domain/industry),"
            "(3) Preferred resource types (academic papers, industry reports,"
            "blogs, documentation, etc.), (4) Time frame considerations"
            "(recent developments, historical context, specific time periods),"
            "and "
            "(5) Any particular angles or aspects to emphasize or avoid."
        ),
    )


async def invoke_search_deep_research_artifacts(ctx: RunContextWrapper[Any], args: str) -> str:
    """
    Search for previously generated deep research artifacts.

    This tool searches through the knowledge base for comprehensive research
    reports that have been previously generated by the deep research agent.

    Args:
        ctx: The run context wrapper
        args: JSON string containing the search parameters

    Returns:
        JSON string containing one of two possible response schemas:

        Success Response:
        {
            "query": str,           # The original search query
            "total_found": int,     # Number of results found
            "results": list,        # List of research artifacts
            "message": str          # Status message
        }

        Error Response:
        {
            "status": "error",      # Indicates an error occurred
            "error": str,           # Error description
            "message": str          # User-friendly error message
        }

        The caller should check for the presence of "status": "error" to
        determine if an exception occurred and handle accordingly.
    """
    try:
        # Parse and validate arguments
        args_parsed = DeepResearchSearchParams.model_validate_json(args)
        query = args_parsed.query
        max_results = args_parsed.max_results

        logger.info(f"Searching deep research artifacts for '{query=}' with {max_results=}")

        # TODO: For now, return empty results as placeholder
        # In the future, this would query the actual knowledge database
        results: dict[str, Any] = {
            "query": query,
            "total_found": 0,
            "results": [],
            "message": (
                "No deep research artifacts found. The deep research agent "
                "hasn't generated any reports yet."
            ),
        }

        return json.dumps(results, indent=2)

    except Exception as e:
        logger.error(f"Error in search_deep_research_artifacts: {str(e)}")
        error_result = {
            "status": "error",
            "error": str(e),
            "message": (
                "Failed to search deep research artifacts. Please check your search parameters and try again."
            ),
        }
        return json.dumps(error_result, indent=2)


async def invoke_new_deep_research(ctx: RunContextWrapper[Any], args: str) -> str:
    """
    Request new deep research from the web research agent.

    This tool creates a task for the web research agent and forwards
    the complete research request message directly to the agent. The message
    should be comprehensive and include all necessary context, preferences,
    and requirements for the research.

    For effective research requests, include:
    - Research depth and breadth preferences (e.g., "comprehensive analysis",
      "focused study", "high-level overview")
    - Specific context and disambiguation (clarify acronyms, specify
      industry/domain)
    - Preferred resource types (academic papers, industry reports, blogs,
      documentation, news articles)
    - Time frame considerations (recent developments, historical context,
      specific periods)
    - Particular angles, aspects to emphasize, or areas to avoid
    - Target audience or use case for the research

    Args:
        ctx: The run context wrapper
        args: JSON string containing the research request message

    Returns:
        JSON string containing one of two possible response schemas:

        Success Response:
        {
            "status": "research_initiated",    # Indicates successful initiation
            "task_id": str,                    # ID of the created research task
            "task_name": str,                  # Name of the research task
            "event_id": str,                   # ID of the sent event
            "research_request": str,           # The original research message
            "message": str                     # Confirmation message
        }

        Error Response:
        {
            "status": "error",                 # Indicates an error occurred
            "error": str,                      # Error description
            "message": str                     # User-friendly error message
        }

        The caller should check the "status" field to determine if the request
        was successful ("research_initiated") or failed ("error") and handle
        accordingly for error recovery.
    """
    try:
        # Parse and validate arguments
        args_parsed = NewResearchRequestParams.model_validate_json(args)
        research_message = args_parsed.message

        env_vars = EnvironmentVariables.refresh()
        client = Agentex(base_url=env_vars.AGENTEX_BASE_URL)

        # Create a new task for the web research agent
        task_response = client.agents.create_task(
            agent_name=DEEP_RESEARCH_AGENT_NAME, params={"name": f"{str(uuid.uuid4())[:8]}-research-task", "params": {}}
        )
        logger.info(f"Requesting new web research with message")
        task = task_response.result

        # Send the research request message directly to the web research agent
        event_response = client.agents.send_event(
            agent_name=DEEP_RESEARCH_AGENT_NAME,
            params={
                "content": {"type": "text", "author": "user", "content": research_message},
                "task_id": task.id,
            },
        )

        event = event_response.result

        # Return task and event information
        result = {
            "status": "research_initiated",
            "task_id": task.id,
            "task_name": task.name,
            "event_id": event.id,
            "research_request": research_message,
            "message": (
                f"Web research task '{task.name}' has been initiated. "
                "The web research agent will process this request "
                "asynchronously."
            ),
        }

        return json.dumps(result, indent=2)

    except Exception as e:
        logger.error(f"Failed to initiate deep research: {str(e)}")
        error_result = {
            "status": "error",
            "error": str(e),
            "message": (
                "Failed to initiate web research. Please check your "
                "arguments, network connectivity, and that the web research "
                "agent is running and accessible."
            ),
        }
        return json.dumps(error_result, indent=2)


# Create FunctionTool object that includes both definition and handler
DEEP_RESEARCH_SEARCH_TOOL = FunctionTool(
    name="search_deep_research_artifacts",
    description=(
        "Search for previously generated deep research artifacts and "
        "reports in the knowledge base"
     ),
    params_json_schema=DeepResearchSearchParams.model_json_schema(),
    on_invoke_tool=invoke_search_deep_research_artifacts,
)

# Create FunctionTool object for requesting new web research
NEW_DEEP_RESEARCH_TOOL = FunctionTool(
    name="request_new_deep_research",
    description=(
        "Request new research from the web research agent. Pass a "
        "detailed research request message that will be forwarded directly to "
        "the web research agent. Include research depth preferences, "
        "context/disambiguation, preferred resource types, time frame "
        "considerations, and specific angles or aspects to cover. The more "
        "detailed and specific your message, the better the research results "
        "will be."
    ),
    params_json_schema=NewResearchRequestParams.model_json_schema(),
    on_invoke_tool=invoke_new_deep_research,
)

# Available tools for the agent
AVAILABLE_TOOLS = [DEEP_RESEARCH_SEARCH_TOOL, NEW_DEEP_RESEARCH_TOOL]
