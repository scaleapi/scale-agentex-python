"""
Tests for {{ agent_name }}

This test suite demonstrates testing your agentic agent with the AgentEx testing framework.

Test coverage:
- Basic event sending and polling
- Streaming responses
- Multi-turn conversations

Prerequisites:
    - AgentEx services running (make dev)
    - Agent running: agentex agents run --manifest manifest.yaml

Run tests:
    pytest tests/test_agent.py -v
"""

import pytest

from agentex.lib.testing import (
    test_agentic_agent,
    assert_valid_agent_response,
    assert_agent_response_contains,
    stream_agent_response,
    stream_task_messages,
)

AGENT_NAME = "{{ agent_name }}"


@pytest.mark.asyncio
async def test_agent_basic_response():
    """Test that agent responds to basic events."""
    async with test_agentic_agent(agent_name=AGENT_NAME) as test:
        response = await test.send_event(
            "Hello! Please respond briefly.",
            timeout_seconds=30.0
        )

        assert_valid_agent_response(response)
        assert len(response.content) > 0
        print(f"✓ Agent responded: {response.content[:80]}...")


@pytest.mark.asyncio
async def test_agent_multi_turn():
    """Test multi-turn conversation."""
    async with test_agentic_agent(agent_name=AGENT_NAME) as test:
        # Turn 1
        response1 = await test.send_event("Hello!", timeout_seconds=30.0)
        assert_valid_agent_response(response1)

        # Turn 2
        response2 = await test.send_event("How are you?", timeout_seconds=30.0)
        assert_valid_agent_response(response2)

        # Turn 3
        response3 = await test.send_event("Thank you!", timeout_seconds=30.0)
        assert_valid_agent_response(response3)

        # Verify history
        history = await test.get_conversation_history()
        assert len(history) >= 6, f"Expected >= 6 messages, got {len(history)}"
        print(f"✓ Conversation: {len(history)} messages")


@pytest.mark.asyncio
async def test_agent_streaming():
    """Test streaming responses from agent."""
    async with test_agentic_agent(agent_name=AGENT_NAME) as test:
        # Send event first
        await test.send_event("Start streaming task", timeout_seconds=10.0)

        # Now stream subsequent events
        events_received = []
        async for event in test.send_event_and_stream("Stream this response", timeout_seconds=30.0):
            events_received.append(event)
            event_type = event.get('type')

            if event_type == 'done':
                print(f"✓ Stream complete ({len(events_received)} events)")
                break

        assert len(events_received) > 0, "Should receive at least one event"
        print(f"✓ Streaming works ({len(events_received)} events received)")


@pytest.mark.asyncio
async def test_agent_custom_scenario():
    """
    Add your custom test scenarios here.

    Customize this test for your agent's specific behavior and requirements.
    """
    async with test_agentic_agent(agent_name=AGENT_NAME) as test:
        # Example: Test specific functionality
        response = await test.send_event(
            "Your custom test message here",
            timeout_seconds=30.0
        )

        assert_valid_agent_response(response)

        # Add assertions specific to your agent's expected behavior
        # assert_agent_response_contains(response, "expected text")
        # assert len(response.content) > 100, "Response should be detailed"


if __name__ == "__main__":
    print(f"Run with: pytest tests/test_agent.py -v")
    print(f"Testing agent: {AGENT_NAME}")
