"""
Tests for {{ agent_name }} (sync agent)

This test suite demonstrates testing your sync agent with the AgentEx testing framework.

Test coverage:
- Basic message sending
- Streaming responses
- Multi-turn conversations

Prerequisites:
    - AgentEx services running (make dev)
    - Agent running: agentex agents run --manifest manifest.yaml

Run tests:
    pytest tests/test_agent.py -v
"""

from agentex.lib.testing import (
    test_sync_agent,
    assert_valid_agent_response,
    assert_agent_response_contains,
    collect_streaming_deltas,
)

AGENT_NAME = "{{ agent_name }}"


def test_agent_basic_response():
    """Test that sync agent responds to basic messages."""
    with test_sync_agent(agent_name=AGENT_NAME) as test:
        response = test.send_message("Hello! Please respond briefly.")

        assert_valid_agent_response(response)
        assert len(response.content) > 0
        print(f"✓ Agent responded: {response.content[:80]}...")


def test_agent_multi_turn():
    """Test multi-turn conversation."""
    with test_sync_agent(agent_name=AGENT_NAME) as test:
        # Turn 1
        response1 = test.send_message("Hello!")
        assert_valid_agent_response(response1)

        # Turn 2
        response2 = test.send_message("How are you?")
        assert_valid_agent_response(response2)

        # Turn 3
        response3 = test.send_message("Thank you!")
        assert_valid_agent_response(response3)

        # Verify history
        history = test.get_conversation_history()
        assert len(history) >= 6, f"Expected >= 6 messages, got {len(history)}"
        print(f"✓ Conversation: {len(history)} messages")


def test_agent_streaming():
    """Test streaming responses from sync agent."""
    with test_sync_agent(agent_name=AGENT_NAME) as test:
        # Get streaming response
        response_gen = test.send_message_streaming("Stream this response please")

        # Collect the streaming deltas
        content, chunks = collect_streaming_deltas(response_gen)

        assert len(content) > 0, "Should receive content from stream"
        assert len(chunks) > 0, "Should receive at least one chunk"
        print(f"✓ Streaming works ({len(chunks)} chunks, {len(content)} chars)")


def test_agent_custom_scenario():
    """
    Add your custom test scenarios here.

    Customize this test for your agent's specific behavior and requirements.
    """
    with test_sync_agent(agent_name=AGENT_NAME) as test:
        # Example: Test specific functionality
        response = test.send_message("Your custom test message here")

        assert_valid_agent_response(response)

        # Add assertions specific to your agent's expected behavior
        # assert_agent_response_contains(response, "expected text")
        # assert len(response.content) > 100, "Response should be detailed"


if __name__ == "__main__":
    print(f"Run with: pytest tests/test_agent.py -v")
    print(f"Testing agent: {AGENT_NAME}")
