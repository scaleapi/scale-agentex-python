import asyncio
import os
import sys

# === DEBUG SETUP (AgentEx CLI Debug Support) ===
if os.getenv("AGENTEX_DEBUG_ENABLED") == "true":
    try:
        import debugpy
        debug_port = int(os.getenv("AGENTEX_DEBUG_PORT", "5678"))
        debug_type = os.getenv("AGENTEX_DEBUG_TYPE", "worker")
        wait_for_attach = os.getenv("AGENTEX_DEBUG_WAIT_FOR_ATTACH", "false").lower() == "true"
        
        # Configure debugpy
        debugpy.configure(subProcess=False)
        debugpy.listen(debug_port)
        
        print(f"üêõ [{debug_type.upper()}] Debug server listening on port {debug_port}")
        
        if wait_for_attach:
            print(f"‚è≥ [{debug_type.upper()}] Waiting for debugger to attach...")
            debugpy.wait_for_client()
            print(f"‚úÖ [{debug_type.upper()}] Debugger attached!")
        else:
            print(f"üì° [{debug_type.upper()}] Ready for debugger attachment")
            
    except ImportError:
        print("‚ùå debugpy not available. Install with: pip install debugpy")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå Debug setup failed: {e}")
        sys.exit(1)
# === END DEBUG SETUP ===

from agentex.lib.core.temporal.activities import get_all_activities
from agentex.lib.core.temporal.workers.worker import AgentexWorker
from agentex.lib.utils.logging import make_logger
from agentex.lib.environment_variables import EnvironmentVariables

from workflow import {{ workflow_class }}


environment_variables = EnvironmentVariables.refresh()

logger = make_logger(__name__)


async def main():
    task_queue_name = environment_variables.WORKFLOW_TASK_QUEUE
    if task_queue_name is None:
        raise ValueError("WORKFLOW_TASK_QUEUE is not set")

    # Create a worker with automatic tracing
    worker = AgentexWorker(
        task_queue=task_queue_name,
    )

    await worker.run(
        activities=get_all_activities(),
        workflow={{ workflow_class }},
    )

if __name__ == "__main__":
    asyncio.run(main()) 